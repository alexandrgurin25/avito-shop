// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/service.go -package=mocks -source=service.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "avito-shop/internal/entity"
	context "context"
	reflect "reflect"

	pgx "github.com/jackc/pgx/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockwalletRepository is a mock of walletRepository interface.
type MockwalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockwalletRepositoryMockRecorder
	isgomock struct{}
}

// MockwalletRepositoryMockRecorder is the mock recorder for MockwalletRepository.
type MockwalletRepositoryMockRecorder struct {
	mock *MockwalletRepository
}

// NewMockwalletRepository creates a new mock instance.
func NewMockwalletRepository(ctrl *gomock.Controller) *MockwalletRepository {
	mock := &MockwalletRepository{ctrl: ctrl}
	mock.recorder = &MockwalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwalletRepository) EXPECT() *MockwalletRepositoryMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockwalletRepository) CreateWallet(ctx context.Context, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockwalletRepositoryMockRecorder) CreateWallet(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockwalletRepository)(nil).CreateWallet), ctx, userID)
}

// GetAmountByUserId mocks base method.
func (m *MockwalletRepository) GetAmountByUserId(ctx context.Context, tx pgx.Tx, userID int) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAmountByUserId", ctx, tx, userID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAmountByUserId indicates an expected call of GetAmountByUserId.
func (mr *MockwalletRepositoryMockRecorder) GetAmountByUserId(ctx, tx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAmountByUserId", reflect.TypeOf((*MockwalletRepository)(nil).GetAmountByUserId), ctx, tx, userID)
}

// SetAmount mocks base method.
func (m *MockwalletRepository) SetAmount(ctx context.Context, tx pgx.Tx, usesId, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAmount", ctx, tx, usesId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAmount indicates an expected call of SetAmount.
func (mr *MockwalletRepositoryMockRecorder) SetAmount(ctx, tx, usesId, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAmount", reflect.TypeOf((*MockwalletRepository)(nil).SetAmount), ctx, tx, usesId, amount)
}

// StartTransaction mocks base method.
func (m *MockwalletRepository) StartTransaction(ctx context.Context) (pgx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", ctx)
	ret0, _ := ret[0].(pgx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockwalletRepositoryMockRecorder) StartTransaction(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockwalletRepository)(nil).StartTransaction), ctx)
}

// MockauthRepository is a mock of authRepository interface.
type MockauthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockauthRepositoryMockRecorder
	isgomock struct{}
}

// MockauthRepositoryMockRecorder is the mock recorder for MockauthRepository.
type MockauthRepositoryMockRecorder struct {
	mock *MockauthRepository
}

// NewMockauthRepository creates a new mock instance.
func NewMockauthRepository(ctrl *gomock.Controller) *MockauthRepository {
	mock := &MockauthRepository{ctrl: ctrl}
	mock.recorder = &MockauthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthRepository) EXPECT() *MockauthRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockauthRepository) CreateUser(ctx context.Context, username, passwordHash string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, username, passwordHash)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockauthRepositoryMockRecorder) CreateUser(ctx, username, passwordHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockauthRepository)(nil).CreateUser), ctx, username, passwordHash)
}

// FindUserByUsername mocks base method.
func (m *MockauthRepository) FindUserByUsername(ctx context.Context, tx pgx.Tx, username string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUsername", ctx, tx, username)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUsername indicates an expected call of FindUserByUsername.
func (mr *MockauthRepositoryMockRecorder) FindUserByUsername(ctx, tx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsername", reflect.TypeOf((*MockauthRepository)(nil).FindUserByUsername), ctx, tx, username)
}

// MockcoinHistoryRepository is a mock of coinHistoryRepository interface.
type MockcoinHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockcoinHistoryRepositoryMockRecorder
	isgomock struct{}
}

// MockcoinHistoryRepositoryMockRecorder is the mock recorder for MockcoinHistoryRepository.
type MockcoinHistoryRepositoryMockRecorder struct {
	mock *MockcoinHistoryRepository
}

// NewMockcoinHistoryRepository creates a new mock instance.
func NewMockcoinHistoryRepository(ctrl *gomock.Controller) *MockcoinHistoryRepository {
	mock := &MockcoinHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockcoinHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcoinHistoryRepository) EXPECT() *MockcoinHistoryRepositoryMockRecorder {
	return m.recorder
}

// AddCoinHisory mocks base method.
func (m *MockcoinHistoryRepository) AddCoinHisory(ctx context.Context, tx pgx.Tx, fromUserId, toUserID, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCoinHisory", ctx, tx, fromUserId, toUserID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCoinHisory indicates an expected call of AddCoinHisory.
func (mr *MockcoinHistoryRepositoryMockRecorder) AddCoinHisory(ctx, tx, fromUserId, toUserID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCoinHisory", reflect.TypeOf((*MockcoinHistoryRepository)(nil).AddCoinHisory), ctx, tx, fromUserId, toUserID, amount)
}
